import { j as jsx, a as jsxs } from "./chunk-ac9dafa4.js";
import { useEffect, useRef } from "react";
import PropTypes from "prop-types";
import { gsap } from "gsap/dist/gsap.js";
import { ScrollTrigger } from "gsap/dist/ScrollTrigger.js";
gsap.registerPlugin(ScrollTrigger);
const SvgLine = ({ id, duration, delay }) => {
  useEffect(() => {
    console.log("svg line starts");
    const ctx = gsap.context(() => {
      const paths = gsap.utils.toArray(`svg#${id} path`);
      paths.forEach((path) => {
        const pathLength = path.getTotalLength();
        gsap.set(path, {
          strokeDasharray: pathLength,
          strokeDashoffset: pathLength
        });
        gsap.to(path, {
          strokeDashoffset: 0,
          scrollTrigger: {
            trigger: path,
            duration,
            delay,
            start: "top center",
            end: "bottom center",
            scrub: true
          }
        });
      });
    });
    return () => ctx.revert();
  }, [id, delay, duration]);
  const components = {
    sStar: /* @__PURE__ */ jsx(Star, {}),
    sArrow: /* @__PURE__ */ jsx(Arrow, {}),
    sHand: /* @__PURE__ */ jsx(Hand, {})
  };
  return components[id] || "error";
};
function Star() {
  return /* @__PURE__ */ jsx(
    "svg",
    {
      className: "starsvg",
      id: "sStar",
      xmlns: "http://www.w3.org/2000/svg",
      width: "296",
      height: "71",
      viewBox: "0 0 296 71",
      fill: "none",
      children: /* @__PURE__ */ jsx(
        "path",
        {
          id: "star-path",
          d: "M164.68 59.0702C115.31 62.4702 65.3199 65.8302 16.6399 56.9302C9.36988 55.6002 0.139896 50.9902 2.0299 43.8502C2.7999 40.9502 5.33985 38.9002 7.79985 37.1902C25.3899 24.9802 46.5899 19.2302 67.5499 14.8402C122.21 3.41024 178.51 -0.119756 234.17 4.39024C250.63 5.72024 267.32 7.83024 282.42 14.5102C288.08 17.0102 294.17 21.2402 294.32 27.4202C294.5 35.1402 285.73 39.5102 278.36 41.8302C237.7 54.6402 195.88 63.8002 153.58 69.1402",
          stroke: "black",
          strokeWidth: "3",
          strokeLinecap: "round",
          strokeLinejoin: "round"
        }
      )
    }
  );
}
function Arrow() {
  return /* @__PURE__ */ jsxs(
    "svg",
    {
      className: "starsvg",
      id: "sArrow",
      width: "188",
      height: "268",
      viewBox: "0 0 188 268",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      children: [
        /* @__PURE__ */ jsx("rect", { width: "188", height: "268", fill: "white" }),
        /* @__PURE__ */ jsx(
          "path",
          {
            d: "M124.211 22.8809C124.211 22.8809 148.769 44.4868 145.88 77.6159C142.991 110.745 124.384 146.524 75.0951 142.434C40.4251 139.553 34.6468 115.066 36.0914 104.983C37.536 94.9007 50.0605 79.0563 74.1272 82.6573C98.194 86.2583 127.1 125.149 119.877 159.719C112.654 194.288 83.7626 224.536 56.3155 234.619",
            stroke: "#040000",
            strokeWidth: "2",
            strokeLinecap: "round",
            strokeLinejoin: "round"
          }
        ),
        /* @__PURE__ */ jsx(
          "path",
          {
            d: "M67 211C67 211 51.9819 234.619 51.9819 237.5C56.5 237.5 80.5 235.5 80.5 235.5",
            stroke: "#040000",
            strokeWidth: "2",
            strokeLinecap: "round",
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
}
function Hand() {
  return /* @__PURE__ */ jsxs(
    "svg",
    {
      className: "starsvg",
      id: "sHand",
      xmlns: "http://www.w3.org/2000/svg",
      width: "146",
      height: "185",
      viewBox: "0 0 146 185",
      fill: "none",
      children: [
        /* @__PURE__ */ jsx(
          "path",
          {
            d: "M16.3069 87.9538C16.3069 87.9538 16.3073 87.9532 16.3083 87.9522C16.3074 87.9533 16.3069 87.9538 16.3069 87.9538ZM16.772 87.0402C16.4699 85.9902 16.394 84.8293 16.4403 83.5272C16.4668 82.7836 16.5313 82.0244 16.6056 81.2276C16.6182 81.0921 16.6312 80.9549 16.6443 80.8164C16.7053 80.1718 16.769 79.4989 16.8125 78.8386C17.5414 72.0103 18.3962 65.1952 19.485 58.4245C22.2535 42.7493 25.3324 27.0364 32.1744 12.9214L32.1779 12.9143L32.1812 12.9073C34.5679 7.88362 38.9701 3.77539 44.1788 2.69774C45.7443 2.79699 46.9925 3.59966 48.0737 5.10533C49.2459 6.73755 50.1244 9.08585 50.763 11.841C51.835 16.466 52.1187 21.6759 52.322 25.4095C52.3608 26.1221 52.3967 26.7809 52.4346 27.3716C53.0406 39.154 51.7455 50.9232 50.4352 62.8309C50.3888 63.2527 50.3424 63.6747 50.296 64.0969C50.1915 64.5467 50.123 65.1077 50.0682 65.6398C50.0013 66.289 49.9392 67.071 49.8741 67.9014L49.862 68.0558C49.7328 69.7039 49.5863 71.5736 49.3568 73.3066C49.2015 74.4794 49.019 75.4941 48.8112 76.2901C48.79 76.0666 48.7802 75.8142 48.784 75.5293C48.7966 74.6069 48.9281 73.7661 49.0622 72.9081C49.1304 72.4722 49.1992 72.0319 49.2536 71.5742L49.2548 71.5634C49.297 71.1899 49.3393 70.8164 49.3816 70.4427C50.4754 60.7807 51.5764 51.0544 52.2853 41.2889L52.293 41.1828L52.2894 41.0764C52.2477 39.8437 52.2769 38.1272 52.3122 36.0591C52.3255 35.2816 52.3396 34.4543 52.3511 33.5844C52.3925 30.4537 52.3969 26.863 52.1814 23.3834C51.9672 19.9251 51.5301 16.4625 50.6433 13.6254C49.7864 10.8842 48.3402 8.1824 45.7088 7.0877L45.2033 6.87739L44.6611 6.9539C36.7869 8.06518 32.3954 14.109 29.5889 20.63C28.1742 23.9169 27.1015 27.4587 26.1713 30.7977C25.8935 31.7951 25.6301 32.7672 25.3747 33.7098C24.761 35.975 24.1934 38.0697 23.5822 39.935L23.5611 39.9996L23.5444 40.0654C20.6197 51.5791 18.7933 63.3083 17.3957 75.0224L17.3942 75.0351L17.3929 75.0478C17.3398 75.5466 17.2849 76.0494 17.2296 76.5555C17.0028 78.6322 16.7699 80.7644 16.6344 82.9013L16.6078 83.3219L16.7531 83.7174C17.1416 84.7752 17.1371 86.0354 16.772 87.0402Z",
            stroke: "black",
            strokeWidth: "4"
          }
        ),
        /* @__PURE__ */ jsx(
          "path",
          {
            d: "M75.7049 53.0302C77.6048 53.9289 79.4429 56.211 80.6576 59.9135C80.4068 59.5086 80.1311 59.1207 79.8284 58.7548C78.2108 56.7993 75.8948 55.5772 72.9401 55.6855L72.6421 55.6964L72.3551 55.7771C65.3931 57.7341 60.7473 63.5234 57.5698 69.7167C57.5526 69.7502 57.5355 69.7837 57.5184 69.8172C59.171 66.0838 61.0637 62.5276 63.4443 59.3887C68.9552 52.4748 73.2057 51.8481 75.7049 53.0302ZM51.7105 92.225L51.7101 92.1579L53.6127 92.1423C54.5451 92.1347 55.4509 92.1212 56.3471 92.1079C57.6596 92.0885 58.9515 92.0693 60.2761 92.0691C60.64 92.0754 61.0012 92.0806 61.3598 92.0857C63.6673 92.1185 65.8679 92.1498 67.9768 92.4886C70.3697 92.873 72.3908 93.6232 73.9898 95.0461L74.0092 95.0634L74.0289 95.0802C76.2056 96.9377 77.8919 99.5553 78.8335 102.417C78.5271 101.967 78.1893 101.537 77.8324 101.129C76.6345 99.759 75.0952 98.4896 73.3993 97.3508L73.1383 97.1755L72.8419 97.0703C68.1873 95.418 63.3751 95.1571 58.7806 95.2226C56.99 95.2481 55.2821 95.3187 53.6176 95.3876C50.8413 95.5024 48.1859 95.6123 45.4695 95.4993L45.3533 95.4945L45.2371 95.5005C43.0484 95.6132 40.7465 95.635 38.3132 95.658C37.0418 95.6701 35.7346 95.6825 34.389 95.7083C30.5445 95.7822 26.5074 95.9676 22.6327 96.612C15.223 97.8443 8.03034 100.832 3.85086 108.289C4.21629 107.151 4.66724 106.038 5.217 104.954L5.22798 104.932L5.23853 104.911C8.05425 99.0798 13.1069 95.9685 19.2849 94.2902C25.5377 92.5916 32.6423 92.445 39.161 92.3805L39.1691 92.3804L39.1773 92.3803C42.5222 92.3254 45.8682 92.2888 49.2223 92.2522L51.7105 92.225ZM78.9139 111.228C79.051 111.052 79.1786 110.874 79.2967 110.692C78.8193 112.639 77.8785 114.42 76.4356 115.884C73.5164 118.024 70.1701 119.621 66.5857 121.027L61.5793 122.99L61.541 122.901L59.3267 123.694C58.9808 123.818 58.6263 123.944 58.267 124.071C57.3955 124.379 56.4955 124.697 55.6198 125.029L52.8891 126.064L54.3318 128.602C54.8902 129.585 55.568 130.594 56.1989 131.534C56.3004 131.685 56.4007 131.835 56.4991 131.982C57.2392 133.089 57.9088 134.123 58.4334 135.15C58.9244 136.112 59.2411 136.972 59.368 137.771C57.9089 135.175 56.2055 132.707 54.5847 130.359C53.7646 129.171 52.9656 128.013 52.2302 126.886C51.9162 126.164 51.7117 124.977 51.8591 123.961C52.0123 122.906 52.3554 122.838 52.4513 122.82C52.4534 122.819 52.4554 122.819 52.4573 122.818L52.539 122.802L52.6194 122.78C59.8281 120.814 66.8202 118.09 73.5323 114.995C75.8702 113.997 77.7146 112.767 78.9139 111.228ZM62.4676 125.063L61.9899 123.948L66.6161 125.694C70.2309 127.057 74.4554 127.016 77.9862 125.521C80.131 124.751 81.1573 123.039 81.7489 121.814L80.3666 125.265C79.4636 127.519 77.5916 128.935 75.1832 129.578C72.7336 130.232 69.8812 130.025 67.488 129.093C65.1832 128.159 63.1671 126.695 62.4676 125.063ZM84.7421 124.77L82.127 120.997C82.2852 120.653 82.4152 120.38 82.5259 120.161C82.5489 120.195 82.5727 120.23 82.5975 120.266L82.6022 120.273C82.7348 120.468 82.8985 120.709 83.0746 120.946C83.4117 121.4 83.9296 122.033 84.6726 122.509L84.8158 122.601L84.97 122.673C89.3611 124.709 93.4349 124.23 96.8658 121.924C99.8131 119.944 102.138 116.723 103.962 113.08C102.315 116.894 100.276 120.448 97.8022 123.59C96.0861 125.544 93.4465 126.973 90.8853 127.291C88.3922 127.6 86.1929 126.864 84.7421 124.77ZM109.71 79.9649C109.778 79.6053 109.889 79.2822 110.04 79.0138L110.107 78.8956C109.994 79.2101 109.884 79.5101 109.777 79.7902L109.71 79.9649ZM110.769 77.0456C110.645 77.3863 110.525 77.7228 110.408 78.0501L110.393 77.9214L110.769 77.0456ZM107.872 69.3359C107.786 69.192 107.696 69.0496 107.603 68.9091C106.36 67.0242 104.463 65.3481 101.723 64.8804L101.583 64.8564L101.441 64.8486C95.2409 64.5041 87.8606 67.263 84.1534 72.8807C83.5331 73.5488 83.1173 74.3531 82.8215 75.0721C82.7769 75.1804 82.7337 75.2903 82.6917 75.4017C82.8115 74.6559 82.9067 73.8703 82.9729 73.0602L86.4943 68.1629C88.7794 64.9849 92.6395 62.995 96.8191 62.0096L96.9046 61.9894L96.9884 61.9633C100.305 60.9308 102.55 61.7072 104.257 63.2688C105.776 64.6588 106.989 66.7998 107.872 69.3359ZM81.196 81.6871C81.2316 81.5428 81.2684 81.3954 81.306 81.246C81.2582 81.5192 81.2111 81.791 81.1647 82.0592C81.0673 82.6214 80.9726 83.1684 80.8786 83.6818C80.7574 84.3434 80.6377 84.948 80.5164 85.4917C80.5304 85.2624 80.5529 85.0209 80.5839 84.7665C80.7024 83.7938 80.9299 82.7663 81.196 81.6871ZM119.815 58.5196C117.368 62.9743 115.042 67.4723 112.89 72.0968L113.146 71.4992C116.382 63.947 120.277 56.6543 124.422 49.4342C125.596 47.5751 126.69 45.5244 127.732 43.5719C128.28 42.5434 128.815 41.5421 129.338 40.6105C130.924 37.7896 132.567 35.2879 134.7 33.281C136.194 32.0737 137.156 32.0076 137.71 32.1159C138.363 32.2438 139.173 32.7556 140.044 33.9303C141.005 35.2274 141.777 36.9835 142.312 38.7656C141.54 37.5445 140.514 36.4983 139.165 35.7295L138.651 35.4366L138.061 35.4051C134.818 35.2322 132.638 37.1068 131.214 38.9154C130.501 39.8207 129.898 40.8051 129.387 41.6761C129.231 41.9414 129.087 42.1907 128.95 42.4268C128.61 43.0162 128.316 43.5234 128.01 43.9932L127.968 44.0581L127.929 44.1253C127.347 45.1524 126.763 46.1803 126.178 47.2093C124.048 50.9579 121.909 54.7214 119.817 58.5158L119.815 58.5196ZM122.056 117.905C124.764 112.869 127.394 107.563 129.744 102.132C128.371 105.602 126.831 109.015 125.17 112.39C124.396 113.955 123.589 115.502 122.767 117.077L122.76 117.089C122.282 118.006 121.799 118.932 121.32 119.867C121.502 119.171 121.741 118.519 122.056 117.905ZM111.941 158.224C112.799 156.763 113.572 155.268 114.268 153.748C114.084 154.221 113.895 154.691 113.699 155.156C110.398 163.003 105.418 169.598 97.7395 173.551L97.7134 173.564L97.6877 173.578C89.6142 177.977 81.0749 181.598 72.2877 181.61C59.4681 181.149 46.8108 180.075 36.8554 172.761C36.8471 172.747 36.8365 172.729 36.8237 172.705C36.7537 172.572 36.6775 172.369 36.5999 172.087L36.5546 171.923L36.5149 171.83C36.5105 171.808 36.5034 171.77 36.4958 171.713C36.4756 171.561 36.4611 171.347 36.4629 171.084C36.4656 170.68 36.5062 170.244 36.5812 169.845C41.7334 173.072 47.5153 175.886 53.9321 176.714L53.9424 176.715C54.7953 176.821 55.6569 176.933 56.5261 177.045C63.7279 177.976 71.452 178.973 79.0953 177.786L79.2223 177.766L79.3465 177.733C90.9798 174.678 104.504 169.563 111.876 158.328L111.909 158.277L111.941 158.224ZM6.9146 142.614C7.73908 144.345 8.6314 146.025 9.54992 147.651L9.58362 147.711L9.62055 147.768C9.98203 148.334 10.3495 148.92 10.7261 149.521C13.4743 153.907 16.7015 159.058 21.5512 162.297L21.8696 162.51L22.2124 162.61C22.2195 162.619 22.2291 162.633 22.2406 162.652C22.3209 162.784 22.4318 163.069 22.4839 163.542C22.5613 164.245 22.4734 165.012 22.3225 165.601C22.1071 165.459 21.9036 165.294 21.7423 165.141C15.3276 158.884 10.1775 151.072 6.9146 142.614ZM22.9424 165.905C22.9423 165.905 22.9405 165.905 22.9372 165.904C22.9407 165.905 22.9425 165.905 22.9424 165.905ZM22.2371 162.617C22.2388 162.618 22.2383 162.618 22.2362 162.617L22.2371 162.617Z",
            stroke: "black",
            strokeWidth: "4"
          }
        )
      ]
    }
  );
}
SvgLine.propTypes = {
  id: PropTypes.string.isRequired,
  duration: PropTypes.number.isRequired,
  delay: PropTypes.number
};
const marquee_wrap = "_marquee_wrap_1il39_1";
const marquee_items = "_marquee_items_1il39_5";
const styles = {
  marquee_wrap,
  marquee_items
};
gsap.registerPlugin(ScrollTrigger);
function Textmarquee({ content, speed, withSvg, svgId }) {
  const marquee = useRef();
  useEffect(() => {
    const parentSelector = marquee.current;
    const clone = parentSelector.innerHTML;
    parentSelector.insertAdjacentHTML("beforeend", clone);
    parentSelector.insertAdjacentHTML("beforeend", clone);
    gsap.utils.toArray("#marquee_wrap").forEach((section) => {
      const container = section.querySelector("div");
      const xEnd = (container.scrollWidth - section.offsetWidth) * -1;
      const firstElement = parentSelector.children[0];
      const distanceX = firstElement.clientWidth;
      const tl = gsap.timeline();
      tl.fromTo(
        firstElement,
        { marginLeft: 0 },
        {
          marginLeft: -distanceX,
          duration: speed,
          ease: "none",
          repeat: -1,
          start: "top center",
          end: "+=bottom"
        }
      ).to(parentSelector, {
        x: xEnd,
        scrollTrigger: {
          trigger: firstElement,
          scrub: 1,
          markers: true
        }
      });
    });
  }, [speed]);
  return /* @__PURE__ */ jsx("section", { className: ` ${styles.marquee_wrap}`, id: "marquee_wrap", children: /* @__PURE__ */ jsx("div", { className: styles.marquee_items, ref: marquee, children: /* @__PURE__ */ jsxs("span", { children: [
    content,
    withSvg && /* @__PURE__ */ jsx(SvgLine, { id: svgId, duration: 500, delay: 50 })
  ] }) }) });
}
Textmarquee.propTypes = {
  content: PropTypes.string.isRequired,
  speed: PropTypes.number.isRequired,
  withSvg: PropTypes.bool,
  svgId: PropTypes.string
};
export {
  SvgLine as S,
  Textmarquee as T
};
